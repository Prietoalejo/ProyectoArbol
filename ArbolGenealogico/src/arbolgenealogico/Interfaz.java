/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package arbolgenealogico;
import javax.swing.JOptionPane;
import edd.Tree;
import edd.Metodos.*;
import edd.NodoLista;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import edd.HashTable;
import edd.Metodos;
import java.awt.Color;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.regex.Pattern;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;

/**
 * @author Massimo Gramcko
 * @author Alejandro Prieto
 * @author Edgar Téran
 */
public class Interfaz extends javax.swing.JFrame {
    private HashTable hash;
    private Metodos metodos;
    private Tree tree; //Arbol para el programa
    int xMouse, yMouse;
    private ImageIcon imagen;
    private Icon icono;

    public Interfaz() {
        initComponents();
        tab1.setBackground(new Color(38, 166, 154));
        Panel_2.setVisible(false);
        Panel_3.setVisible(false);
        Panel_4.setVisible(false);
        Panel_5.setVisible(false);
        Panel_6.setVisible(false);
        this.setLocationRelativeTo(this);
        tree = new Tree();
        hash = new HashTable();
        metodos = new Metodos(hash);

        this.pintarImagen(this.Img_1, "src/Img/BannerMedieval.png");
        this.pintarImagen(this.Img_2, "src/Img/herencia.gif");
        this.pintarImagen(this.Img_3, "src/Img/Unimet.png");
        this.pintarImagen(this.Img_4, "src/Img/Arbol_Linaje.jpg");
        this.pintarImagen(this.Img_Antepasados, "src/Img/About.gif");
        this.pintarImagen(this.Img_Buscar, "src/Img/Buscar.gif");
        this.pintarImagen(this.Img_Titulo, "src/Img/Titulo.gif");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private String[] dividirElementos(String texto, String delimitador) {
        texto = texto.replaceAll("[\\[\\]]", "").trim(); // Eliminar corchetes exteriores
        int count = 0; // Contador para determinar el tamaño del arreglo
        int inicio = 0;

        // Contar ocurrencias del delimitador para dimensionar el arreglo
        while ((inicio = texto.indexOf(delimitador, inicio)) != -1) {
            count++;
            inicio += delimitador.length();
        }

        // Crear el arreglo con el tamaño necesario
        String[] elementos = new String[count + 1];
        inicio = 0;
        int index = 0;

        // Dividir el texto y llenar el arreglo
        while (inicio < texto.length()) {
            int indiceDelimitador = texto.indexOf(delimitador, inicio);
            if (indiceDelimitador == -1) {
                indiceDelimitador = texto.length();
            }
            elementos[index++] = texto.substring(inicio, indiceDelimitador).trim();
            inicio = indiceDelimitador + delimitador.length();
        }

        return elementos;
    }

    private String extraerValor(String clave, String texto) {
        try {
            int inicio = texto.indexOf("\"" + clave + "\":");
            if (inicio == -1) return null;

            inicio += clave.length() + 3;
            char delimitadorInicio = texto.charAt(inicio);
            int fin;

            if (delimitadorInicio == '\"') {
                fin = texto.indexOf("\"", inicio + 1);
            } else if (delimitadorInicio == '[') {
                fin = texto.indexOf("]", inicio) + 1;
            } else {
                fin = texto.indexOf(",", inicio);
                if (fin == -1) fin = texto.indexOf("}", inicio);
            }

            if (fin == -1 || inicio >= fin) return null;
            String valor = texto.substring(inicio, fin).replace("\"", "").trim();

            return valor.isEmpty() || valor.equals("null") ? null : valor;
        } catch (Exception e) {
            System.out.println("Error extrayendo valor para clave: " + clave + " -> " + e.getMessage());
            return null;
        }
    }





    private String[] dividirTextoLista(String texto) {
    texto = texto.replaceAll("\\[|\\]", ""); // Eliminar corchetes
    return texto.split(","); // Dividir por comas
}


    
    private String extraerClavePrincipal(String texto) {
        int inicio = texto.indexOf("\""); //Encuentra las primeras comillas
        int fin = texto.indexOf("\":", inicio); //Encuentra los dos puntos (:)
        if (inicio == -1 || fin == -1) return null;//Valida la existencia de la clave limpia

        return texto.substring(inicio + 1, fin).trim(); //Retorna la clave limpia
    }


    private void instanciarNodosArbol(String contenido, Tree tree) {
        try {
            JsonParser parser = new JsonParser();
            JsonObject casas = parser.parse(contenido).getAsJsonObject(); // Convierte el contenido en un objeto JSON

            for (String nombreCasa : casas.keySet()) {
                System.out.println("Procesando casa: " + nombreCasa);

                // Obtener miembros de la casa
                JsonElement miembrosElemento = casas.get(nombreCasa);
                if (!miembrosElemento.isJsonArray()) {
                    System.out.println("Error: Se esperaba un array para los miembros de la casa " + nombreCasa);
                    continue;
                }

                for (JsonElement miembroElemento : miembrosElemento.getAsJsonArray()) {
                    if (!miembroElemento.isJsonObject()) {
                        System.out.println("Error: Se esperaba un objeto JSON para el miembro.");
                        continue;
                    }

                    JsonObject miembro = miembroElemento.getAsJsonObject();
                    for (String nombreMiembro : miembro.keySet()) {
                        System.out.println("Procesando miembro: " + nombreMiembro);

                        JsonElement atributosElemento = miembro.get(nombreMiembro);
                        if (!atributosElemento.isJsonArray()) {
                            System.out.println("Error: Se esperaba un array para los atributos de " + nombreMiembro);
                            continue;
                        }

                        String mote = obtenerValorDeAtributos(atributosElemento, "Known throughout as");
                        String heldTitle = obtenerValorDeAtributos(atributosElemento, "Held title");
                        String eyeColor = obtenerValorDeAtributos(atributosElemento, "Of eyes");
                        String hairColor = obtenerValorDeAtributos(atributosElemento, "Of hair");
                        String notes = obtenerValorDeAtributos(atributosElemento, "Notes");
                        String fate = obtenerValorDeAtributos(atributosElemento, "Fate");

                        // Procesar "Father to" como una lista de hijos en formato texto
                        String fatherTo = obtenerValorDeAtributos(atributosElemento, "Father to");

                        // Crear el nodo
                        NodoLista nodo = new NodoLista(
                            normalizarNombre(nombreMiembro),
                            tree.getKeyCounter(),
                            mote,
                            heldTitle,
                            eyeColor,
                            hairColor,
                            notes,
                            fate
                        );

                        // Insertar nodo en árbol y tabla hash
                        if (tree.isEmpty()) {
                            tree.setRoot(nodo);
                        }

                        tree.getHt().insertWithValue(nodo);
                        tree.setKeyCounter(tree.getKeyCounter() + 1);

                        System.out.println("Nodo creado: " + nodo.getNombre() + " | Título: " + heldTitle);
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error al instanciar nodos en el árbol: " + e.getMessage());
            e.printStackTrace();
        }
    }



    private String getValorDeAtributo(String atributosTexto, String clave) {
        try {
            // Localiza la clave en el texto
            int inicio = atributosTexto.indexOf("\"" + clave + "\":");
            if (inicio == -1) {
                return null; // Si no se encuentra la clave, devuelve null
            }

            // Ajusta el inicio para ignorar la clave y el delimitador
            inicio += clave.length() + 3;
            char delimitadorInicio = atributosTexto.charAt(inicio);
            int fin;

            // Determina el tipo de valor según el delimitador
            if (delimitadorInicio == '\"') {
                fin = atributosTexto.indexOf("\"", inicio + 1); // Valor encerrado en comillas
            } else if (delimitadorInicio == '[') {
                fin = atributosTexto.indexOf("]", inicio) + 1; // Lista (corchetes)
            } else {
                fin = atributosTexto.indexOf(",", inicio); // Valor primitivo
                if (fin == -1) {
                    fin = atributosTexto.indexOf("}", inicio); // Final del objeto
                }
            }

            // Verifica si el rango es válido
            if (fin == -1 || inicio >= fin) {
                return null;
            }

            // Extrae y limpia el valor
            String valor = atributosTexto.substring(inicio, fin).replace("\"", "").trim();
            return valor.isEmpty() || valor.equals("null") ? null : valor;

        } catch (Exception e) {
            System.out.println("Error al procesar el valor para la clave: " + clave + " -> " + e.getMessage());
            return null;
        }
    }

        
    private String obtenerValorDeAtributos(JsonElement atributosElemento, String clave) {
    try {
        if (!atributosElemento.isJsonArray()) return null;

        for (JsonElement atributoElemento : atributosElemento.getAsJsonArray()) {
            if (!atributoElemento.isJsonObject()) continue;

            JsonObject atributo = atributoElemento.getAsJsonObject();
            if (atributo.has(clave)) {
                JsonElement valor = atributo.get(clave);
                if (valor.isJsonArray()) {
                    // Convertir el array a una cadena delimitada por comas
                    StringBuilder resultado = new StringBuilder();
                    for (JsonElement item : valor.getAsJsonArray()) {
                        if (resultado.length() > 0) {
                            resultado.append(", ");
                        }
                        resultado.append(item.getAsString().trim());
                    }
                    return resultado.toString();
                } else if (valor.isJsonPrimitive()) {
                    return valor.getAsString().trim();
                }
            }
        }
    } catch (Exception e) {
        System.out.println("Error obteniendo valor de atributos para clave: " + clave + " -> " + e.getMessage());
    }
    return null;
}



private void instanciarRelacionesTablaHash(JsonObject casas, Tree tree) {
    try {
        for (String nombreCasa : casas.keySet()) {
            System.out.println("Procesando relaciones para la casa: " + nombreCasa);

            JsonElement miembrosElement = casas.get(nombreCasa);
            String miembrosTexto = miembrosElement.toString();
            String[] miembros = dividirElementos(miembrosTexto, "},{");

            for (String miembroTexto : miembros) {
                String nombreMiembro = extraerClavePrincipal(miembroTexto);
                String padre = extraerValor("Born to", miembroTexto);
                String hijosTexto = extraerValor("Father to", miembroTexto);

                NodoLista nodo = tree.getHt().gettNodeById(normalizarNombre(nombreMiembro));
                if (nodo == null) {
                    System.out.println("Advertencia: Nodo no encontrado para: " + nombreMiembro);
                    continue;
                }

                // Procesar relación con el padre
                if (padre != null && !padre.equals("Unknown")) {
                    String padreNormalizado = normalizarNombre(padre);
                    NodoLista nodoPadre = tree.getHt().gettNodeById(padreNormalizado);

                    if (nodoPadre != null) {
                        nodo.setParent(nodoPadre);
                        tree.increaseSons(nodoPadre, nodo);
                        System.out.println("Relación padre-hijo: " + padre + " -> " + nodo.getNombre());
                    } else {
                        System.out.println("Advertencia: Nodo padre no encontrado para: " + padre);
                    }
                }

                // Procesar relación con los hijos
                if (hijosTexto != null) {
                    String[] hijos = dividirElementos(hijosTexto, ",");
                    for (String hijo : hijos) {
                        String hijoNormalizado = normalizarNombre(hijo.trim());
                        NodoLista nodoHijo = tree.getHt().gettNodeById(hijoNormalizado);

                        if (nodoHijo != null) {
                            tree.increaseSons(nodo, nodoHijo);
                            System.out.println("Relación hijo-padre: " + nodo.getNombre() + " -> " + hijo);
                        } else {
                            System.out.println("Advertencia: Nodo hijo no encontrado para: " + hijo);
                        }
                    }
                }
            }
        }
    } catch (Exception e) {
        System.out.println("Error al instanciar relaciones en la tabla hash: " + e.getMessage());
    }
}




    private void instanciarTablaHash(String contenido, Tree tree) {
        try {
            JsonParser parser = new JsonParser();
            JsonElement element = parser.parse(contenido);
            JsonObject casas = element.getAsJsonObject();

            for (String nombreCasa : casas.keySet()) {
                System.out.println("Procesando relaciones para casa: " + nombreCasa);
                String miembrosTexto = casas.get(nombreCasa).toString();

                // Dividir miembros
                String[] miembros = dividirElementos(miembrosTexto, "},{");

                for (String miembroTexto : miembros) {
                    String nombreMiembro = extraerClavePrincipal(miembroTexto);
                    String padre = extraerValor("Born to", miembroTexto);
                    String hijosTexto = extraerValor("Father to", miembroTexto);

                    NodoLista nodo = tree.getHt().gettNodeById(normalizarNombre(nombreMiembro));
                    if (nodo == null) continue;

                    // Relacionar con padre
                    if (padre != null && !padre.equals("[Unknown]")) {
                        NodoLista nodoPadre = tree.getHt().gettNodeById(normalizarNombre(padre));
                        if (nodoPadre != null) {
                            nodo.setParent(nodoPadre);
                            tree.increaseSons(nodoPadre, nodo);
                            System.out.println("Relación padre-hijo: " + padre + " -> " + nodo.getNombre());
                        } else {
                            System.out.println("Padre no encontrado: " + padre);
                        }
                    }

                    // Relacionar con hijos
                    if (hijosTexto != null) {
                        String[] hijos = dividirElementos(hijosTexto, ",");
                        for (String hijo : hijos) {
                            String hijoNormalizado = normalizarNombre(hijo.trim());
                            NodoLista nodoHijo = tree.getHt().gettNodeById(hijoNormalizado);
                            if (nodoHijo != null) {
                                tree.increaseSons(nodo, nodoHijo);
                                System.out.println("Relación hijo-padre: " + nodo.getNombre() + " -> " + hijo);
                            } else {
                                System.out.println("Hijo no encontrado: " + hijo);
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error al instanciar relaciones en la tabla hash: " + e.getMessage());
        }
    }


    public static String normalizarNombre(String nombre) {
        return nombre == null ? null : nombre.trim().toLowerCase().replaceAll("[^a-z0-9 ]", "").replaceAll("\\s+", " ");
    }


 private void procesarRelacion(Tree tree, String padre, String hijosTexto) {
    if (padre == null || hijosTexto == null) {
        System.out.println("Advertencia: Relación inválida (padre o hijo es nulo)");
        return;
    }

    padre = normalizarNombre(padre);
    NodoLista nodoPadre = tree.getHt().gettNodeById(padre);

    if (nodoPadre == null) {
        System.out.println("Advertencia: Nodo padre no encontrado: " + padre);
        return;
    }

    hijosTexto = hijosTexto.replaceAll("\\[|\\]", ""); // Eliminar corchetes si existen
    String[] hijos = hijosTexto.split(",");

    for (String hijo : hijos) {
        hijo = normalizarNombre(hijo.trim());
        NodoLista nodoHijo = tree.getHt().gettNodeById(hijo);

        if (nodoHijo != null) {
            tree.increaseSons(nodoPadre, nodoHijo);
            System.out.println("Relación padre-hijo creada: " + padre + " -> " + hijo);
        } else {
            System.out.println("Advertencia: Nodo hijo no encontrado: " + hijo);
        }
    }
}

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PnlMenu = new javax.swing.JPanel();
        tab1 = new javax.swing.JPanel();
        TexHome = new javax.swing.JLabel();
        tab2 = new javax.swing.JPanel();
        TexService = new javax.swing.JLabel();
        tab3 = new javax.swing.JPanel();
        TexAbout = new javax.swing.JLabel();
        TextoTitulo = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        tab4 = new javax.swing.JPanel();
        TexAbout1 = new javax.swing.JLabel();
        tab5 = new javax.swing.JPanel();
        TexAbout2 = new javax.swing.JLabel();
        tab6 = new javax.swing.JPanel();
        TexAbout3 = new javax.swing.JLabel();
        Img_3 = new javax.swing.JLabel();
        PnlFondo = new javax.swing.JPanel();
        Panel_1 = new javax.swing.JPanel();
        Cargar_Arbol = new javax.swing.JButton();
        Img_1 = new javax.swing.JLabel();
        Img_2 = new javax.swing.JLabel();
        Panel_2 = new javax.swing.JPanel();
        Img_4 = new javax.swing.JLabel();
        Panel_3 = new javax.swing.JPanel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jTextField3 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        Img_Buscar = new javax.swing.JLabel();
        Panel_4 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jTextField2 = new javax.swing.JTextField();
        Img_Antepasados = new javax.swing.JLabel();
        Panel_5 = new javax.swing.JPanel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        Img_Titulo = new javax.swing.JLabel();
        Panel_6 = new javax.swing.JPanel();
        BarraArriba = new javax.swing.JPanel();
        BtnSalida = new javax.swing.JPanel();
        Label_Salida = new javax.swing.JLabel();
        BarraAbajo = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PnlMenu.setBackground(new java.awt.Color(102, 102, 102));
        PnlMenu.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                PnlMenuMouseDragged(evt);
            }
        });
        PnlMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                PnlMenuMousePressed(evt);
            }
        });

        tab1.setBackground(new java.awt.Color(38, 166, 154));
        tab1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tab1MouseClicked(evt);
            }
        });

        TexHome.setBackground(new java.awt.Color(38, 166, 154));
        TexHome.setFont(new java.awt.Font("Monotype Corsiva", 1, 20)); // NOI18N
        TexHome.setForeground(new java.awt.Color(255, 255, 255));
        TexHome.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TexHome.setText("Home");

        javax.swing.GroupLayout tab1Layout = new javax.swing.GroupLayout(tab1);
        tab1.setLayout(tab1Layout);
        tab1Layout.setHorizontalGroup(
            tab1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab1Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(TexHome, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tab1Layout.setVerticalGroup(
            tab1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TexHome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tab2.setBackground(new java.awt.Color(38, 166, 154));
        tab2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tab2MouseClicked(evt);
            }
        });

        TexService.setFont(new java.awt.Font("Monotype Corsiva", 1, 20)); // NOI18N
        TexService.setForeground(new java.awt.Color(255, 255, 255));
        TexService.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TexService.setText("Ver Registro");

        javax.swing.GroupLayout tab2Layout = new javax.swing.GroupLayout(tab2);
        tab2.setLayout(tab2Layout);
        tab2Layout.setHorizontalGroup(
            tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TexService, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );
        tab2Layout.setVerticalGroup(
            tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TexService)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tab3.setBackground(new java.awt.Color(38, 166, 154));
        tab3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tab3MouseClicked(evt);
            }
        });

        TexAbout.setFont(new java.awt.Font("Monotype Corsiva", 1, 20)); // NOI18N
        TexAbout.setForeground(new java.awt.Color(255, 255, 255));
        TexAbout.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TexAbout.setText("Buscar Nombre");

        javax.swing.GroupLayout tab3Layout = new javax.swing.GroupLayout(tab3);
        tab3.setLayout(tab3Layout);
        tab3Layout.setHorizontalGroup(
            tab3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TexAbout, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );
        tab3Layout.setVerticalGroup(
            tab3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TexAbout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        TextoTitulo.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        TextoTitulo.setForeground(new java.awt.Color(0, 204, 204));
        TextoTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TextoTitulo.setText("Árbol Genealógico");

        jLabel1.setFont(new java.awt.Font("SimSun-ExtG", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Registro de Linajes");

        tab4.setBackground(new java.awt.Color(38, 166, 154));
        tab4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tab4MouseClicked(evt);
            }
        });

        TexAbout1.setFont(new java.awt.Font("Monotype Corsiva", 1, 20)); // NOI18N
        TexAbout1.setForeground(new java.awt.Color(255, 255, 255));
        TexAbout1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TexAbout1.setText("Antepasados");

        javax.swing.GroupLayout tab4Layout = new javax.swing.GroupLayout(tab4);
        tab4.setLayout(tab4Layout);
        tab4Layout.setHorizontalGroup(
            tab4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TexAbout1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );
        tab4Layout.setVerticalGroup(
            tab4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TexAbout1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tab5.setBackground(new java.awt.Color(38, 166, 154));
        tab5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tab5MouseClicked(evt);
            }
        });

        TexAbout2.setFont(new java.awt.Font("Monotype Corsiva", 1, 20)); // NOI18N
        TexAbout2.setForeground(new java.awt.Color(255, 255, 255));
        TexAbout2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TexAbout2.setText("Titulo");

        javax.swing.GroupLayout tab5Layout = new javax.swing.GroupLayout(tab5);
        tab5.setLayout(tab5Layout);
        tab5Layout.setHorizontalGroup(
            tab5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TexAbout2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70))
        );
        tab5Layout.setVerticalGroup(
            tab5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TexAbout2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tab6.setBackground(new java.awt.Color(38, 166, 154));
        tab6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tab6MouseClicked(evt);
            }
        });

        TexAbout3.setFont(new java.awt.Font("Monotype Corsiva", 1, 20)); // NOI18N
        TexAbout3.setForeground(new java.awt.Color(255, 255, 255));
        TexAbout3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TexAbout3.setText("Integrantes");

        javax.swing.GroupLayout tab6Layout = new javax.swing.GroupLayout(tab6);
        tab6.setLayout(tab6Layout);
        tab6Layout.setHorizontalGroup(
            tab6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TexAbout3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );
        tab6Layout.setVerticalGroup(
            tab6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TexAbout3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout PnlMenuLayout = new javax.swing.GroupLayout(PnlMenu);
        PnlMenu.setLayout(PnlMenuLayout);
        PnlMenuLayout.setHorizontalGroup(
            PnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tab1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tab2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tab3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(PnlMenuLayout.createSequentialGroup()
                .addGroup(PnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PnlMenuLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TextoTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(PnlMenuLayout.createSequentialGroup()
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 8, Short.MAX_VALUE))))
                    .addGroup(PnlMenuLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(tab4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tab5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tab6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(Img_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        PnlMenuLayout.setVerticalGroup(
            PnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PnlMenuLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(TextoTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addComponent(tab1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tab2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tab3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tab4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tab5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tab6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Img_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        PnlFondo.setBackground(new java.awt.Color(38, 166, 154));

        Panel_1.setBackground(new java.awt.Color(255, 255, 255));
        Panel_1.setPreferredSize(new java.awt.Dimension(560, 427));

        Cargar_Arbol.setBackground(new java.awt.Color(38, 166, 154));
        Cargar_Arbol.setFont(new java.awt.Font("Monotype Corsiva", 1, 16)); // NOI18N
        Cargar_Arbol.setForeground(new java.awt.Color(255, 255, 255));
        Cargar_Arbol.setText("Cargar Árbol");
        Cargar_Arbol.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Cargar_ArbolMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Cargar_ArbolMouseExited(evt);
            }
        });
        Cargar_Arbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cargar_ArbolActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Panel_1Layout = new javax.swing.GroupLayout(Panel_1);
        Panel_1.setLayout(Panel_1Layout);
        Panel_1Layout.setHorizontalGroup(
            Panel_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel_1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(Img_1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(Panel_1Layout.createSequentialGroup()
                .addGroup(Panel_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel_1Layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(Img_2, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Panel_1Layout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addComponent(Cargar_Arbol, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Panel_1Layout.setVerticalGroup(
            Panel_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_1Layout.createSequentialGroup()
                .addComponent(Img_1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(Img_2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(Cargar_Arbol, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        Panel_2.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout Panel_2Layout = new javax.swing.GroupLayout(Panel_2);
        Panel_2.setLayout(Panel_2Layout);
        Panel_2Layout.setHorizontalGroup(
            Panel_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_2Layout.createSequentialGroup()
                .addContainerGap(262, Short.MAX_VALUE)
                .addComponent(Img_4, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        Panel_2Layout.setVerticalGroup(
            Panel_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Img_4, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                .addContainerGap())
        );

        Panel_3.setBackground(new java.awt.Color(255, 255, 255));

        jComboBox3.setBackground(new java.awt.Color(38, 166, 154));
        jComboBox3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jComboBox3.setForeground(new java.awt.Color(255, 255, 255));
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jLabel4.setFont(new java.awt.Font("Monotype Corsiva", 1, 36)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Buscar por nombre");

        jSeparator4.setForeground(new java.awt.Color(38, 166, 154));

        javax.swing.GroupLayout Panel_3Layout = new javax.swing.GroupLayout(Panel_3);
        Panel_3.setLayout(Panel_3Layout);
        Panel_3Layout.setHorizontalGroup(
            Panel_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel_3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(Panel_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(159, 159, 159))
            .addGroup(Panel_3Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(Panel_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Img_Buscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );
        Panel_3Layout.setVerticalGroup(
            Panel_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel_3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addGroup(Panel_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel_3Layout.createSequentialGroup()
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(Img_Buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(37, 37, 37))
        );

        Panel_4.setBackground(new java.awt.Color(255, 255, 255));

        jComboBox1.setBackground(new java.awt.Color(38, 166, 154));
        jComboBox1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(255, 255, 255));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel2.setFont(new java.awt.Font("Monotype Corsiva", 1, 36)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Ver Antepasados");

        jSeparator2.setForeground(new java.awt.Color(38, 166, 154));

        javax.swing.GroupLayout Panel_4Layout = new javax.swing.GroupLayout(Panel_4);
        Panel_4.setLayout(Panel_4Layout);
        Panel_4Layout.setHorizontalGroup(
            Panel_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_4Layout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addGroup(Panel_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel_4Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(161, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel_4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(Panel_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Img_Antepasados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );
        Panel_4Layout.setVerticalGroup(
            Panel_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_4Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(Panel_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(Panel_4Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Img_Antepasados, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28))
        );

        Panel_5.setBackground(new java.awt.Color(255, 255, 255));

        jComboBox2.setBackground(new java.awt.Color(38, 166, 154));
        jComboBox2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jComboBox2.setForeground(new java.awt.Color(255, 255, 255));
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel3.setFont(new java.awt.Font("Monotype Corsiva", 1, 36)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Buscar por Título");

        jSeparator3.setBackground(new java.awt.Color(38, 166, 154));

        javax.swing.GroupLayout Panel_5Layout = new javax.swing.GroupLayout(Panel_5);
        Panel_5.setLayout(Panel_5Layout);
        Panel_5Layout.setHorizontalGroup(
            Panel_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_5Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(Panel_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Img_Titulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addGap(42, 42, 42))
            .addGroup(Panel_5Layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addGroup(Panel_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel_5Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Panel_5Layout.setVerticalGroup(
            Panel_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel_5Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addGroup(Panel_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel_5Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(Img_Titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43))
        );

        Panel_6.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout Panel_6Layout = new javax.swing.GroupLayout(Panel_6);
        Panel_6.setLayout(Panel_6Layout);
        Panel_6Layout.setHorizontalGroup(
            Panel_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 588, Short.MAX_VALUE)
        );
        Panel_6Layout.setVerticalGroup(
            Panel_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 520, Short.MAX_VALUE)
        );

        BarraArriba.setBackground(new java.awt.Color(102, 102, 102));

        BtnSalida.setBackground(new java.awt.Color(38, 166, 154));

        Label_Salida.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        Label_Salida.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label_Salida.setText("X");
        Label_Salida.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Label_SalidaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Label_SalidaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Label_SalidaMouseExited(evt);
            }
        });

        javax.swing.GroupLayout BtnSalidaLayout = new javax.swing.GroupLayout(BtnSalida);
        BtnSalida.setLayout(BtnSalidaLayout);
        BtnSalidaLayout.setHorizontalGroup(
            BtnSalidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BtnSalidaLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(Label_Salida, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        BtnSalidaLayout.setVerticalGroup(
            BtnSalidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Label_Salida, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout BarraArribaLayout = new javax.swing.GroupLayout(BarraArriba);
        BarraArriba.setLayout(BarraArribaLayout);
        BarraArribaLayout.setHorizontalGroup(
            BarraArribaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BarraArribaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BtnSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        BarraArribaLayout.setVerticalGroup(
            BarraArribaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BtnSalida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        BarraAbajo.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout BarraAbajoLayout = new javax.swing.GroupLayout(BarraAbajo);
        BarraAbajo.setLayout(BarraAbajoLayout);
        BarraAbajoLayout.setHorizontalGroup(
            BarraAbajoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        BarraAbajoLayout.setVerticalGroup(
            BarraAbajoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout PnlFondoLayout = new javax.swing.GroupLayout(PnlFondo);
        PnlFondo.setLayout(PnlFondoLayout);
        PnlFondoLayout.setHorizontalGroup(
            PnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BarraArriba, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(PnlFondoLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(Panel_1, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
            .addComponent(BarraAbajo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(PnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PnlFondoLayout.createSequentialGroup()
                    .addGap(21, 21, 21)
                    .addComponent(Panel_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(21, 21, 21)))
            .addGroup(PnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PnlFondoLayout.createSequentialGroup()
                    .addGap(21, 21, 21)
                    .addComponent(Panel_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(21, 21, 21)))
            .addGroup(PnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PnlFondoLayout.createSequentialGroup()
                    .addGap(21, 21, 21)
                    .addComponent(Panel_4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(21, 21, 21)))
            .addGroup(PnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PnlFondoLayout.createSequentialGroup()
                    .addGap(21, 21, 21)
                    .addComponent(Panel_5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(21, 21, 21)))
            .addGroup(PnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PnlFondoLayout.createSequentialGroup()
                    .addGap(21, 21, 21)
                    .addComponent(Panel_6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(21, 21, 21)))
        );
        PnlFondoLayout.setVerticalGroup(
            PnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PnlFondoLayout.createSequentialGroup()
                .addComponent(BarraArriba, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(Panel_1, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(BarraAbajo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(PnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PnlFondoLayout.createSequentialGroup()
                    .addGap(53, 53, 53)
                    .addComponent(Panel_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(54, 54, 54)))
            .addGroup(PnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PnlFondoLayout.createSequentialGroup()
                    .addGap(53, 53, 53)
                    .addComponent(Panel_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(54, 54, 54)))
            .addGroup(PnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PnlFondoLayout.createSequentialGroup()
                    .addGap(53, 53, 53)
                    .addComponent(Panel_4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(54, 54, 54)))
            .addGroup(PnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PnlFondoLayout.createSequentialGroup()
                    .addGap(53, 53, 53)
                    .addComponent(Panel_5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(54, 54, 54)))
            .addGroup(PnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PnlFondoLayout.createSequentialGroup()
                    .addGap(53, 53, 53)
                    .addComponent(Panel_6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(54, 54, 54)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(PnlMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PnlFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PnlMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(PnlFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tab1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tab1MouseClicked
        Panel_1.setVisible(true);
        Panel_2.setVisible(false);
        Panel_3.setVisible(false);
        Panel_4.setVisible(false);
        Panel_5.setVisible(false);
        Panel_6.setVisible(false);
        tab1.setBackground(Color.black);
        tab2.setBackground(new Color(38, 166, 154));
        tab3.setBackground(new Color(38, 166, 154));
        tab4.setBackground(new Color(38, 166, 154));
        tab5.setBackground(new Color(38, 166, 154));
        tab6.setBackground(new Color(38, 166, 154));
    }//GEN-LAST:event_tab1MouseClicked

    private void tab2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tab2MouseClicked
        Panel_1.setVisible(false);
        Panel_2.setVisible(true);
        Panel_3.setVisible(false);
        Panel_4.setVisible(false);
        Panel_5.setVisible(false);
        Panel_6.setVisible(false);
        tab2.setBackground(Color.black);
        tab1.setBackground(new Color(38, 166, 154));
        tab3.setBackground(new Color(38, 166, 154));
        tab4.setBackground(new Color(38, 166, 154));
        tab5.setBackground(new Color(38, 166, 154));
        tab6.setBackground(new Color(38, 166, 154));

    }//GEN-LAST:event_tab2MouseClicked

    private void tab3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tab3MouseClicked
        Panel_1.setVisible(false);
        Panel_2.setVisible(false);
        Panel_3.setVisible(true);
        Panel_4.setVisible(false);
        Panel_5.setVisible(false);
        Panel_6.setVisible(false);
        tab3.setBackground(Color.black);
        tab1.setBackground(new Color(38, 166, 154));
        tab2.setBackground(new Color(38, 166, 154));
        tab4.setBackground(new Color(38, 166, 154));
        tab5.setBackground(new Color(38, 166, 154));
        tab6.setBackground(new Color(38, 166, 154));
    }//GEN-LAST:event_tab3MouseClicked

    private void Label_SalidaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Label_SalidaMouseClicked
        System.exit(0); // Salida del programa
    }//GEN-LAST:event_Label_SalidaMouseClicked

    private void Label_SalidaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Label_SalidaMouseEntered
        BtnSalida.setBackground(Color.red);// Coloca el color rojo al seleccionarlo
        Label_Salida.setForeground(Color.white);
    }//GEN-LAST:event_Label_SalidaMouseEntered

    private void Label_SalidaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Label_SalidaMouseExited
        BtnSalida.setBackground(new Color(38, 166, 154));// Devuelve el color del background
        Label_Salida.setForeground(Color.black);
    }//GEN-LAST:event_Label_SalidaMouseExited

    private void PnlMenuMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PnlMenuMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xMouse, y - yMouse); // Direccion del eje X y eje Y del mouse
    }//GEN-LAST:event_PnlMenuMouseDragged

    private void PnlMenuMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PnlMenuMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_PnlMenuMousePressed

    private void tab4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tab4MouseClicked
        Panel_1.setVisible(false);
        Panel_2.setVisible(false);
        Panel_3.setVisible(false);
        Panel_4.setVisible(true);
        Panel_5.setVisible(false);
        Panel_6.setVisible(false);
        tab4.setBackground(Color.black);
        tab1.setBackground(new Color(38, 166, 154));
        tab2.setBackground(new Color(38, 166, 154));
        tab3.setBackground(new Color(38, 166, 154));
        tab5.setBackground(new Color(38, 166, 154));
        tab6.setBackground(new Color(38, 166, 154));
    }//GEN-LAST:event_tab4MouseClicked

    private void tab5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tab5MouseClicked
        Panel_1.setVisible(false);
        Panel_2.setVisible(false);
        Panel_3.setVisible(false);
        Panel_4.setVisible(false);
        Panel_5.setVisible(true);
        Panel_6.setVisible(false);
        tab5.setBackground(Color.black);
        tab1.setBackground(new Color(38, 166, 154));
        tab2.setBackground(new Color(38, 166, 154));
        tab4.setBackground(new Color(38, 166, 154));
        tab3.setBackground(new Color(38, 166, 154));
        tab6.setBackground(new Color(38, 166, 154));
       
    }//GEN-LAST:event_tab5MouseClicked

    private void tab6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tab6MouseClicked
        Panel_1.setVisible(false);
        Panel_2.setVisible(false);
        Panel_3.setVisible(false);
        Panel_4.setVisible(false);
        Panel_5.setVisible(false);
        Panel_6.setVisible(true);
        tab6.setBackground(Color.black);
        tab1.setBackground(new Color(38, 166, 154));
        tab2.setBackground(new Color(38, 166, 154));
        tab4.setBackground(new Color(38, 166, 154));
        tab5.setBackground(new Color(38, 166, 154));
        tab3.setBackground(new Color(38, 166, 154));
    }//GEN-LAST:event_tab6MouseClicked

    private void Cargar_ArbolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cargar_ArbolActionPerformed
                                           
    JFileChooser chooser = new JFileChooser();
    chooser.setDialogTitle("Selecciona un archivo JSON");
    chooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Archivos JSON", "json"));

    int seleccion = chooser.showOpenDialog(this);

    if (seleccion == JFileChooser.APPROVE_OPTION) {
        File file = chooser.getSelectedFile();

        if (file != null && file.getName().endsWith(".json")) {
            try {
                String contenido = new String(Files.readAllBytes(file.toPath()));

                if (tree == null) {
                    tree = new Tree();
                }

                // Procesar nodos e instanciar árbol y tabla hash
                instanciarNodosArbol(contenido, tree);
                instanciarTablaHash(contenido, tree);
                JsonParser parser = new JsonParser();
                JsonElement element = parser.parse(contenido);
                JsonObject casas = element.getAsJsonObject();
                instanciarRelacionesTablaHash(casas, tree);

                JOptionPane.showMessageDialog(this, "Archivo cargado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al procesar el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona un archivo JSON válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    }//GEN-LAST:event_Cargar_ArbolActionPerformed

    private void Cargar_ArbolMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Cargar_ArbolMouseExited
        Cargar_Arbol.setBackground(new Color(38, 166, 154));
        Cargar_Arbol.setForeground(Color.white);
    }//GEN-LAST:event_Cargar_ArbolMouseExited

    private void Cargar_ArbolMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Cargar_ArbolMouseEntered
        Cargar_Arbol.setBackground(Color.black);
        Cargar_Arbol.setForeground(Color.white);
    }//GEN-LAST:event_Cargar_ArbolMouseEntered

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
                                            
    // Verificar si la estructura de datos y métodos están inicializados
    if (this.metodos == null || this.hash == null || this.hash.size() == 0) {
        JOptionPane.showMessageDialog(this, "Los datos no se han cargado o la estructura está vacía. Por favor, cargue un archivo primero.", "Error", JOptionPane.ERROR_MESSAGE);
        jTextField1.setText(""); // Limpiar el campo de texto
        jTextField1.requestFocus(); // Enfocar el campo de texto
        return;
    }

    String titulo = jTextField1.getText().trim();

    // Validar que no esté vacío
    if (titulo.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor ingrese un título válido.", "Error", JOptionPane.ERROR_MESSAGE);
        jTextField1.setText(""); // Limpiar el campo de texto
        jTextField1.requestFocus(); // Enfocar el campo de texto
        return;
    }

    // Validar que solo contenga letras y espacios
    if (!titulo.matches("^[a-zA-Z\\s]+$")) {
        JOptionPane.showMessageDialog(this, "El título solo puede contener letras y espacios. No se permiten números ni caracteres especiales.", "Error", JOptionPane.ERROR_MESSAGE);
        jTextField1.setText(""); // Limpiar el campo de texto
        jTextField1.requestFocus(); // Enfocar el campo de texto
        return;
    }

    // Realizar búsqueda por título
    NodoLista[] resultados = metodos.busquedaPorTitulo(titulo);

    if (resultados == null) {
        JOptionPane.showMessageDialog(this, "No se encontraron registros con ese título. Verifique que la estructura contenga datos almacenados.", "Sin resultados", JOptionPane.INFORMATION_MESSAGE);
    } else if (resultados.length == 0) {
        JOptionPane.showMessageDialog(this, "No se encontraron registros con ese título. Intente con otro término.", "Sin resultados", JOptionPane.INFORMATION_MESSAGE);
    } else {
        jComboBox2.removeAllItems(); // Limpiar el combo box
        for (NodoLista nodo : resultados) {
            if (nodo != null) {
                jComboBox2.addItem(nodo.toString()); // Agregar cada resultado al combo box
            }
        }
        JOptionPane.showMessageDialog(this, "Resultados encontrados: " + resultados.length, "Éxito", JOptionPane.INFORMATION_MESSAGE);
    }

    // Limpiar el campo de texto después de procesar
    jTextField1.setText("");
    jTextField1.requestFocus(); // Enfocar el campo de texto


    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
    // Verificar si hay una selección válida
    String seleccion = (String) jComboBox2.getSelectedItem();
    if (seleccion != null) {
        // Verificar si la instancia de métodos está inicializada
        if (this.metodos == null) {
            JOptionPane.showMessageDialog(this, "Los datos no están cargados. Por favor, cargue un archivo primero.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Obtener detalles usando el método verRegistro
        String detalles = this.metodos.verRegistro(seleccion);
        if (detalles != null && !detalles.isEmpty()) {
            jTextArea2.setText(detalles);
        } else {
            jTextArea2.setText("No se encontró información para la selección.");
        }
    }

    }//GEN-LAST:event_jComboBox2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        Tree tree = new Tree();
        java.awt.EventQueue.invokeLater (() -> {
            new Interfaz().setVisible(true);
        });
    }

    private void pintarImagen(JLabel lb1, String ruta) {
        this.imagen = new ImageIcon(ruta);
        this.icono = new ImageIcon(
                this.imagen.getImage().getScaledInstance(
                        lb1.getWidth(),
                        lb1.getHeight(),
                        Image.SCALE_DEFAULT
                )
        );
        lb1.setIcon(this.icono);
        this.repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BarraAbajo;
    private javax.swing.JPanel BarraArriba;
    private javax.swing.JPanel BtnSalida;
    private javax.swing.JButton Cargar_Arbol;
    private javax.swing.JLabel Img_1;
    private javax.swing.JLabel Img_2;
    private javax.swing.JLabel Img_3;
    private javax.swing.JLabel Img_4;
    private javax.swing.JLabel Img_Antepasados;
    private javax.swing.JLabel Img_Buscar;
    private javax.swing.JLabel Img_Titulo;
    private javax.swing.JLabel Label_Salida;
    private javax.swing.JPanel Panel_1;
    private javax.swing.JPanel Panel_2;
    private javax.swing.JPanel Panel_3;
    private javax.swing.JPanel Panel_4;
    private javax.swing.JPanel Panel_5;
    private javax.swing.JPanel Panel_6;
    private javax.swing.JPanel PnlFondo;
    private javax.swing.JPanel PnlMenu;
    private javax.swing.JLabel TexAbout;
    private javax.swing.JLabel TexAbout1;
    private javax.swing.JLabel TexAbout2;
    private javax.swing.JLabel TexAbout3;
    private javax.swing.JLabel TexHome;
    private javax.swing.JLabel TexService;
    private javax.swing.JLabel TextoTitulo;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JPanel tab1;
    private javax.swing.JPanel tab2;
    private javax.swing.JPanel tab3;
    private javax.swing.JPanel tab4;
    private javax.swing.JPanel tab5;
    private javax.swing.JPanel tab6;
    // End of variables declaration//GEN-END:variables
}